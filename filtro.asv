
clear; close all; clc;
import signal.*;
load handel.mat

% Lendo um arquivo de Ã¡udio
[y, Fs] = audioread('SinalRuidoso.wav');

% Calcula a duraÃ§Ã£o do arquivo em segundos
audio_info = audioinfo('SinalRuidoso.wav');
duration = audio_info.TotalSamples / Fs;

% Plotando o sinal ruidoso no tempo
figure('Name','Sinal com Ruido no tempo');
f = (0:length(y)-1)*(duration)/length(y);
plot(f,y);
xlabel('Tempo (S)');
ylabel('Amplitude');
ylim([-3,3])
grid on

% Plotando o sinal ruidoso na frequÃªncia
Y = fft(y); 
%f = (0:length(Y)-1)*(Fs/length(Y));
fVals =(-length(Y)/2:length(Y)/2-1);
figure('Name','Sinal com Ruido na frequÃªncia'); 
func_plotter_freq("$f$(Hz)", "Magnitude", "Espectro do sinal de entrada filtrado", Y', Fs, fVals);
grid on;

% Iniciando o processo de filtragem

% Dados do Projeto ==============================
%M = length(y); %Comprimento do Filtro
%wc = 0.23; %FrequÃªncia de Corte Normalizada (f1+f2)/2
% ================================================
%n = (0:M-1);

%w = (1-cos((2*pi*n)/(M-1)))'*0.5; %Janela de Hannning

fr = 4000;%Frequencia de rejeicao
fa = 2600;%Frequencia de atenuacao
ft = fr - fa;%Frequencia de transicao
fc = (fr+fa)/2;%Frequencia de corte

%Definir parametros do filtro========================
wan = 8*pi*fa/Fs;%Frequencia de atenuacao normalizada
wrn = 8*pi*fr/Fs;%Frequencia de rejeicao normalizada
wtn = 8*pi*ft/Fs;%Frequencia de transicao normalizada
wcn = 8*pi*fc/Fs; %Frequencia de corte normalizada
M = ceil(3.3*2*pi/wtn); % Comprimento do filtro
N = M-1; % Ordem do filtro
ideal_lp = wcn * sinc(wcn.*((0:N)-N/2));%Passa-baixas
w = 0.54 - 0.46*cos(2*pi.*(0:N)/N); %Janela de Hamming
figure();
plot(ideal_lp);


figure();
plot(w);

h = ideal_lp .* w;
figure();
plot(h);

y_filtered = conv(h,y);

%Plotando o sinal filtrado
figure('Name','Sinal filtrado no tempo');
plot(y_filtered);
xlabel('Tempo (S)');
ylabel('Amplitude');


Y_filtered = fft(y_filtered);
figure('Name','Sinal Filtrado na frequência');
func_plotter_freq("$f$(Hz)", "Magnitude", "Espectro do sinal de entrada filtrado", Y_filtered', Fs, fVals)

figure('Name','Espectograma do Sinal Ruidoso');
spectrogram(y,'yaxis')

figure('Name','Espectograma do Sinal Filtrado');
spectrogram(y_filtered,'yaxis')

%Tocando o Ã¡udio
sound(y_filtered, Fs);

filename = 'SinalFiltrado.wav';
audiowrite(filename,y_filtered,Fs);